{"version":3,"sources":["components/vs.png","components/Navbar.js","api/Api.js","components/Mycard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navabar","AppBar","color","position","Toolbar","IconButton","edge","aria-label","Typography","API_KEY","Mycard","match","useState","detail","setDetail","open","setOpen","handleClick","id","url","fetch","then","response","json","catch","error","console","log","getMatchDetail","data","handleOpen","handleClose","Card","CardContent","Grid","container","justify","alignItems","spacing","item","variant","style","width","src","require","alt","CardActions","Button","onClick","unique_id","marginLeft","Date","dateTimeGMT","toLocaleString","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","stat","fontStyle","fontWeight","matchStarted","score","DialogActions","App","matches","setMatches","useEffect","getMatches","className","Navbar","sm","map","type","key","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f4007fa5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vs.377707a5.png\";","import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst Navabar = () => {\r\n    return (\r\n        <AppBar color=\"secondary\" position=\"static\">\r\n            <Toolbar>\r\n            <IconButton edge=\"start\"  color=\"inherit\" aria-label=\"menu\">\r\n      <MenuIcon />\r\n    </IconButton>\r\n                <Typography>CRICKET DEKHO\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Navabar;","const API_KEY = \"YFxAJeXi5KfJnvK3THv8bqmyUkz2\";\r\n\r\nexport const getMatches = () => {\r\n    const url = `https://cricapi.com/api/matches?apikey=${API_KEY}`;\r\n\r\n    return fetch(url).then((response) => response.json()).catch((error) => console.log(\"ERROR : \" , error));\r\n\r\n};\r\n\r\nexport const getMatchDetail=(id)=> {\r\n    const url = `https://cricapi.com/api/cricketScore?apikey=${API_KEY}&unique_id=${id}`; \r\n\r\n    return fetch(url).then((response) => response.json()).catch((error) => console.log(\"ERROR : \" , error));\r\n};","import { Button, Card, CardActions, CardContent, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, Typography } from \"@material-ui/core\";\r\nimport React , {useState} from \"react\";\r\nimport { getMatchDetail } from \"../api/Api\";\r\n\r\n\r\n\r\n const Mycard =({match}) => {\r\n\r\n    const [detail, setDetail] = useState({});\r\n  const [open, setOpen] = useState(false);\r\n\r\n    const handleClick=(id)=>{\r\n        getMatchDetail(id).then((data)=> { console.log(\"MATCH DATA\" , data);\r\n        setDetail(data);\r\n        handleOpen();\r\n    }).catch((error)=> console.log(error));\r\n    };\r\n     \r\n         const getMatchCart=()=> {\r\n             return (\r\n             <Card  >\r\n             <CardContent>\r\n             <Grid container justify=\"center\" alignItems=\"center\" spacing={4}>\r\n                 <Grid item >\r\n                     <Typography variant=\"h5\"> {match [\"team-1\"]}\r\n                     </Typography>\r\n                 </Grid>\r\n                 <Grid item >\r\n                     <img style={{width:85}} src={require(\"../components/vs.png\")}  alt=\"\" />\r\n                 </Grid>\r\n                 <Grid item >\r\n                     <Typography variant=\"h5\"> {match [\"team-2\"]}\r\n                     </Typography>\r\n                 </Grid>\r\n             </Grid>\r\n             </CardContent>\r\n                 \r\n             \r\n             <br/>\r\n             <CardActions>\r\n             <Grid container justify=\"center\" >\r\n             <Button onClick={()=>{\r\n                 handleClick(match.unique_id)\r\n             }} variant=\"contained\" color=\"secondary\">\r\n                     Show Details\r\n                 </Button>\r\n\r\n                 <Button style={{marginLeft : 15}}\r\n                 \r\n                 variant=\"contained\" color=\"primary\">\r\n                    Start Time {new Date(match.dateTimeGMT).toLocaleString()}\r\n                 </Button>\r\n             </Grid>\r\n                 \r\n\r\n             </CardActions>\r\n             </Card>\r\n             \r\n                 \r\n             \r\n             )\r\n         };\r\n\r\n         const handleClose =()=>{\r\n            setOpen(false);\r\n\r\n         }\r\n\r\n         const handleOpen =()=>{\r\n            setOpen(true);\r\n\r\n         }\r\n\r\n         const getDialog = () => (\r\n            <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle id=\"alert-dialog-title\">{\"Match Detail...\"}</DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText id=\"alert-dialog-description\">\r\n                <Typography>{detail.stat}</Typography>\r\n                <Typography>\r\n                  Match\r\n                  <span style={{ fontStyle: \"italic\", fontWeight: \"bold\" }}>\r\n                    {detail.matchStarted ? \"Started\" : \"Still not started\"}\r\n                  </span>\r\n                </Typography>\r\n                <Typography>\r\n                  Score\r\n                  <span style={{ fontStyle: \"italic\", fontWeight: \"bold\" }}>\r\n                    \r\n                    {detail.score}\r\n                  </span>\r\n                </Typography>\r\n              </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleClose} color=\"primary\">\r\n                Close\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n         );\r\n\r\n         \r\n\r\n\r\n\r\nreturn (\r\n    <>\r\n    {getMatchCart()}\r\n    {getDialog()}\r\n    </>\r\n);\r\n         \r\n }\r\n export default Mycard;","\nimport React , {useState , useEffect } from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Mycard from \"./components/Mycard\";\nimport { getMatches } from \"./api/Api\";\nimport { Grid, Typography } from '@material-ui/core';\n\n\n\n\nfunction App() {\n\n  const [matches, setMatches] = useState([]);\n\n  useEffect(() => {\n    getMatches()\n      .then((data) => {\n        console.log(data);\n        setMatches(data.matches);\n      })\n      .catch((error) => {});\n  }, []);\n\n  return (\n    <div className=\"App\">\n    <Navbar/>\n    \n    <h1> Free LIVE Updates</h1>\n    <Typography color=\"secondary\" variant=\"h5\">WATCH LIVE SCORE</Typography>\n    <br/>\n                     \n    \n    <Grid container>\n    <Grid sm=\"3\">\n    \n    </Grid>\n    <Grid sm=\"6\">\n    {matches.map((match) => (\n      <>{(match.type==\"Twenty20\")? (<Mycard key={match.unique_id} match={match} />): (\n        \"\"\n      )}\n      </>\n              \n            ))}\n          </Grid>\n          \n        </Grid>\n\n\n\n    \n    \n    </div>\n    \n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}